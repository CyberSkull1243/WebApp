{"ast":null,"code":"import _regeneratorRuntime from\"H:/Mern Stack Projects/WebApp/Server/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"H:/Mern Stack Projects/WebApp/Server/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"H:/Mern Stack Projects/WebApp/Server/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{GLOBALTYPES}from'./globalTypes';import{postDataAPI,deleteDataAPI,getDataAPI,patchDataAPI}from'../../utils/fetchData';export var NOTIFY_TYPES={GET_NOTIFIES:'GET_NOTIFIES',CREATE_NOTIFY:'CREATE_NOTIFY',REMOVE_NOTIFY:'REMOVE_NOTIFY',UPDATE_NOTIFY:'UPDATE_NOTIFY',UPDATE_SOUND:'UPDATE_SOUND',DELETE_ALL_NOTIFIES:'DELETE_ALL_NOTIFIES'};export var createNotify=function createNotify(_ref){var msg=_ref.msg,auth=_ref.auth,socket=_ref.socket;return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return postDataAPI('notify',msg,auth.token);case 3:res=_context.sent;socket.emit('createNotify',_objectSpread(_objectSpread({},res.data.notify),{},{user:{username:auth.user.username,avatar:auth.user.avatar}}));_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);dispatch({type:GLOBALTYPES.ALERT,payload:{error:_context.t0.response.data.msg}});case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function(_x){return _ref2.apply(this,arguments);};}();};export var removeNotify=function removeNotify(_ref3){var msg=_ref3.msg,auth=_ref3.auth,socket=_ref3.socket;return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return deleteDataAPI(\"notify/\".concat(msg.id,\"?url=\").concat(msg.url),auth.token);case 3:socket.emit('removeNotify',msg);_context2.next=9;break;case 6:_context2.prev=6;_context2.t0=_context2[\"catch\"](0);dispatch({type:GLOBALTYPES.ALERT,payload:{error:_context2.t0.response.data.msg}});case 9:case\"end\":return _context2.stop();}}},_callee2,null,[[0,6]]);}));return function(_x2){return _ref4.apply(this,arguments);};}();};export var getNotifies=function getNotifies(token){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var res;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return getDataAPI('notifies',token);case 3:res=_context3.sent;dispatch({type:NOTIFY_TYPES.GET_NOTIFIES,payload:res.data.notifies});_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);dispatch({type:GLOBALTYPES.ALERT,payload:{error:_context3.t0.response.data.msg}});case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[0,7]]);}));return function(_x3){return _ref5.apply(this,arguments);};}();};export var isReadNotify=function isReadNotify(_ref6){var msg=_ref6.msg,auth=_ref6.auth;return/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:dispatch({type:NOTIFY_TYPES.UPDATE_NOTIFY,payload:_objectSpread(_objectSpread({},msg),{},{isRead:true})});_context4.prev=1;_context4.next=4;return patchDataAPI(\"/isReadNotify/\".concat(msg._id),null,auth.token);case 4:_context4.next=9;break;case 6:_context4.prev=6;_context4.t0=_context4[\"catch\"](1);dispatch({type:GLOBALTYPES.ALERT,payload:{error:_context4.t0.response.data.msg}});case 9:case\"end\":return _context4.stop();}}},_callee4,null,[[1,6]]);}));return function(_x4){return _ref7.apply(this,arguments);};}();};export var deleteAllNotifies=function deleteAllNotifies(token){return/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:dispatch({type:NOTIFY_TYPES.DELETE_ALL_NOTIFIES,payload:[]});_context5.prev=1;_context5.next=4;return deleteDataAPI('deleteAllNotify',token);case 4:_context5.next=9;break;case 6:_context5.prev=6;_context5.t0=_context5[\"catch\"](1);dispatch({type:GLOBALTYPES.ALERT,payload:{error:_context5.t0.response.data.msg}});case 9:case\"end\":return _context5.stop();}}},_callee5,null,[[1,6]]);}));return function(_x5){return _ref8.apply(this,arguments);};}();};","map":{"version":3,"sources":["H:/Mern Stack Projects/WebApp/server/client/src/redux/actions/notifyAction.js"],"names":["GLOBALTYPES","postDataAPI","deleteDataAPI","getDataAPI","patchDataAPI","NOTIFY_TYPES","GET_NOTIFIES","CREATE_NOTIFY","REMOVE_NOTIFY","UPDATE_NOTIFY","UPDATE_SOUND","DELETE_ALL_NOTIFIES","createNotify","msg","auth","socket","dispatch","token","res","emit","data","notify","user","username","avatar","type","ALERT","payload","error","response","removeNotify","id","url","getNotifies","notifies","isReadNotify","isRead","_id","deleteAllNotifies"],"mappings":"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","sourcesContent":["import { GLOBALTYPES } from './globalTypes'\nimport { postDataAPI, deleteDataAPI, getDataAPI, patchDataAPI } from '../../utils/fetchData'\n\nexport const NOTIFY_TYPES = {\n    GET_NOTIFIES: 'GET_NOTIFIES',\n    CREATE_NOTIFY: 'CREATE_NOTIFY',\n    REMOVE_NOTIFY: 'REMOVE_NOTIFY',\n    UPDATE_NOTIFY: 'UPDATE_NOTIFY',\n    UPDATE_SOUND: 'UPDATE_SOUND',\n    DELETE_ALL_NOTIFIES: 'DELETE_ALL_NOTIFIES'\n}\n\nexport const createNotify = ({msg, auth, socket}) => async (dispatch) => {\n    try {\n        const res = await postDataAPI('notify', msg, auth.token)\n\n        socket.emit('createNotify', {\n            ...res.data.notify,\n            user: {\n                username: auth.user.username,\n                avatar: auth.user.avatar\n            }\n        })\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const removeNotify = ({msg, auth, socket}) => async (dispatch) => {\n    try {\n        await deleteDataAPI(`notify/${msg.id}?url=${msg.url}`, auth.token)\n        \n        socket.emit('removeNotify', msg)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const getNotifies = (token) => async (dispatch) => {\n    try {\n        const res = await getDataAPI('notifies', token)\n        \n        dispatch({ type: NOTIFY_TYPES.GET_NOTIFIES, payload: res.data.notifies })\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\n\nexport const isReadNotify = ({msg, auth}) => async (dispatch) => {\n    dispatch({type: NOTIFY_TYPES.UPDATE_NOTIFY, payload: {...msg, isRead: true}})\n    try {\n        await patchDataAPI(`/isReadNotify/${msg._id}`, null, auth.token)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}\n\nexport const deleteAllNotifies = (token) => async (dispatch) => {\n    dispatch({type: NOTIFY_TYPES.DELETE_ALL_NOTIFIES, payload: []})\n    try {\n        await deleteDataAPI('deleteAllNotify', token)\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}"]},"metadata":{},"sourceType":"module"}