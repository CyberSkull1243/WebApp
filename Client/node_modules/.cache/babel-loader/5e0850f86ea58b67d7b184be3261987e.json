{"ast":null,"code":"import _regeneratorRuntime from\"H:/Mern Stack Projects/WebApp/Server/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _createForOfIteratorHelper from\"H:/Mern Stack Projects/WebApp/Server/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _asyncToGenerator from\"H:/Mern Stack Projects/WebApp/Server/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";export var checkImage=function checkImage(file){var err=\"\";if(!file)return err=\"File does not exist.\";if(file.size>1024*1024)// 1mb\nerr=\"The largest image size is 1mb.\";if(file.type!=='image/jpeg'&&file.type!=='image/png')err=\"Image format is incorrect.\";return err;};export var imageUpload=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(images){var imgArr,_iterator,_step,item,formData,res,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:imgArr=[];_iterator=_createForOfIteratorHelper(images);_context.prev=2;_iterator.s();case 4:if((_step=_iterator.n()).done){_context.next=19;break;}item=_step.value;formData=new FormData();if(item.camera){formData.append(\"file\",item.camera);}else{formData.append(\"file\",item);}formData.append(\"upload_preset\",\"efxjficn\");formData.append(\"cloud_name\",\"devat-channel\");_context.next=12;return fetch(\"https://api.cloudinary.com/v1_1/devat-channel/upload\",{method:\"POST\",body:formData});case 12:res=_context.sent;_context.next=15;return res.json();case 15:data=_context.sent;imgArr.push({public_id:data.public_id,url:data.secure_url});case 17:_context.next=4;break;case 19:_context.next=24;break;case 21:_context.prev=21;_context.t0=_context[\"catch\"](2);_iterator.e(_context.t0);case 24:_context.prev=24;_iterator.f();return _context.finish(24);case 27:return _context.abrupt(\"return\",imgArr);case 28:case\"end\":return _context.stop();}}},_callee,null,[[2,21,24,27]]);}));return function imageUpload(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["H:/Mern Stack Projects/WebApp/server/client/src/utils/imageUpload.js"],"names":["checkImage","file","err","size","type","imageUpload","images","imgArr","item","formData","FormData","camera","append","fetch","method","body","res","json","data","push","public_id","url","secure_url"],"mappings":"2fAAA,MAAO,IAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,IAAD,CAAU,CAChC,GAAIC,CAAAA,GAAG,CAAG,EAAV,CACA,GAAG,CAACD,IAAJ,CAAU,MAAOC,CAAAA,GAAG,CAAG,sBAAb,CAEV,GAAGD,IAAI,CAACE,IAAL,CAAY,KAAO,IAAtB,CAA4B;AAC5BD,GAAG,CAAG,gCAAN,CAEA,GAAGD,IAAI,CAACG,IAAL,GAAc,YAAd,EAA8BH,IAAI,CAACG,IAAL,GAAc,WAA/C,CACAF,GAAG,CAAG,4BAAN,CAEA,MAAOA,CAAAA,GAAP,CACH,CAXM,CAcP,MAAO,IAAMG,CAAAA,WAAW,0FAAG,iBAAOC,MAAP,oKACnBC,MADmB,CACV,EADU,sCAELD,MAFK,8FAEbE,IAFa,aAGbC,QAHa,CAGF,GAAIC,CAAAA,QAAJ,EAHE,CAKnB,GAAGF,IAAI,CAACG,MAAR,CAAe,CACXF,QAAQ,CAACG,MAAT,CAAgB,MAAhB,CAAwBJ,IAAI,CAACG,MAA7B,EACH,CAFD,IAEK,CACDF,QAAQ,CAACG,MAAT,CAAgB,MAAhB,CAAwBJ,IAAxB,EACH,CAEDC,QAAQ,CAACG,MAAT,CAAgB,eAAhB,CAAiC,UAAjC,EACAH,QAAQ,CAACG,MAAT,CAAgB,YAAhB,CAA8B,eAA9B,EAZmB,uBAcDC,CAAAA,KAAK,CAAC,sDAAD,CAAyD,CAC5EC,MAAM,CAAE,MADoE,CAE5EC,IAAI,CAAEN,QAFsE,CAAzD,CAdJ,SAcbO,GAda,sCAmBAA,CAAAA,GAAG,CAACC,IAAJ,EAnBA,SAmBbC,IAnBa,eAoBnBX,MAAM,CAACY,IAAP,CAAY,CAACC,SAAS,CAAEF,IAAI,CAACE,SAAjB,CAA4BC,GAAG,CAAEH,IAAI,CAACI,UAAtC,CAAZ,EApBmB,0PAsBhBf,MAtBgB,6EAAH,kBAAXF,CAAAA,WAAW,4CAAjB","sourcesContent":["export const checkImage = (file) => {\n    let err = \"\"\n    if(!file) return err = \"File does not exist.\"\n\n    if(file.size > 1024 * 1024) // 1mb\n    err = \"The largest image size is 1mb.\"\n\n    if(file.type !== 'image/jpeg' && file.type !== 'image/png' )\n    err = \"Image format is incorrect.\"\n    \n    return err;\n}\n\n\nexport const imageUpload = async (images) => {\n    let imgArr = [];\n    for(const item of images){\n        const formData = new FormData()\n\n        if(item.camera){\n            formData.append(\"file\", item.camera)\n        }else{\n            formData.append(\"file\", item)\n        }\n        \n        formData.append(\"upload_preset\", \"efxjficn\")\n        formData.append(\"cloud_name\", \"devat-channel\")\n\n        const res = await fetch(\"https://api.cloudinary.com/v1_1/devat-channel/upload\", {\n            method: \"POST\",\n            body: formData\n        })\n        \n        const data = await res.json()\n        imgArr.push({public_id: data.public_id, url: data.secure_url})\n    }\n    return imgArr;\n}"]},"metadata":{},"sourceType":"module"}