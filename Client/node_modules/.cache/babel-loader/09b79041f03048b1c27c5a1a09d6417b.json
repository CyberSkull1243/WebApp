{"ast":null,"code":"import _regeneratorRuntime from\"H:/Mern Stack Projects/WebApp/Server/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"H:/Mern Stack Projects/WebApp/Server/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{GLOBALTYPES}from'./globalTypes';import{getDataAPI}from'../../utils/fetchData';export var DISCOVER_TYPES={LOADING:'LOADING_DISCOVER',GET_POSTS:'GET_DISCOVER_POSTS',UPDATE_POST:'UPDATE_DISCOVER_POST'};export var getDiscoverPosts=function getDiscoverPosts(token){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch({type:DISCOVER_TYPES.LOADING,payload:true});_context.next=4;return getDataAPI(\"post_discover\",token);case 4:res=_context.sent;dispatch({type:DISCOVER_TYPES.GET_POSTS,payload:res.data});dispatch({type:DISCOVER_TYPES.LOADING,payload:false});_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);dispatch({type:GLOBALTYPES.ALERT,payload:{error:_context.t0.response.data.msg}});case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["H:/Mern Stack Projects/WebApp/server/client/src/redux/actions/discoverAction.js"],"names":["GLOBALTYPES","getDataAPI","DISCOVER_TYPES","LOADING","GET_POSTS","UPDATE_POST","getDiscoverPosts","token","dispatch","type","payload","res","data","ALERT","error","response","msg"],"mappings":"iUAAA,OAASA,WAAT,KAA4B,eAA5B,CACA,OAASC,UAAT,KAA2B,uBAA3B,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,CAC1BC,OAAO,CAAE,kBADiB,CAE1BC,SAAS,CAAE,oBAFe,CAG1BC,WAAW,CAAE,sBAHa,CAAvB,CAMP,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,KAAD,iGAAW,iBAAOC,QAAP,0IAEnCA,QAAQ,CAAC,CAACC,IAAI,CAAEP,cAAc,CAACC,OAAtB,CAA+BO,OAAO,CAAE,IAAxC,CAAD,CAAR,CAFmC,sBAIjBT,CAAAA,UAAU,iBAAkBM,KAAlB,CAJO,QAI7BI,GAJ6B,eAKnCH,QAAQ,CAAC,CAACC,IAAI,CAAEP,cAAc,CAACE,SAAtB,CAAiCM,OAAO,CAAEC,GAAG,CAACC,IAA9C,CAAD,CAAR,CAEAJ,QAAQ,CAAC,CAACC,IAAI,CAAEP,cAAc,CAACC,OAAtB,CAA+BO,OAAO,CAAE,KAAxC,CAAD,CAAR,CAPmC,+EAUnCF,QAAQ,CAAC,CAACC,IAAI,CAAET,WAAW,CAACa,KAAnB,CAA0BH,OAAO,CAAE,CAACI,KAAK,CAAE,YAAIC,QAAJ,CAAaH,IAAb,CAAkBI,GAA1B,CAAnC,CAAD,CAAR,CAVmC,oEAAX,gEAAzB","sourcesContent":["import { GLOBALTYPES } from './globalTypes'\nimport { getDataAPI } from '../../utils/fetchData'\n\nexport const DISCOVER_TYPES = {\n    LOADING: 'LOADING_DISCOVER',\n    GET_POSTS: 'GET_DISCOVER_POSTS',\n    UPDATE_POST: 'UPDATE_DISCOVER_POST'\n}\n\nexport const getDiscoverPosts = (token) => async (dispatch) => {\n    try {\n        dispatch({type: DISCOVER_TYPES.LOADING, payload: true})\n\n        const res = await getDataAPI(`post_discover`, token)\n        dispatch({type: DISCOVER_TYPES.GET_POSTS, payload: res.data})\n\n        dispatch({type: DISCOVER_TYPES.LOADING, payload: false})\n\n    } catch (err) {\n        dispatch({type: GLOBALTYPES.ALERT, payload: {error: err.response.data.msg}})\n    }\n}"]},"metadata":{},"sourceType":"module"}