{"ast":null,"code":"import _toConsumableArray from\"H:/Mern Stack Projects/WebApp/Server/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"H:/Mern Stack Projects/WebApp/Server/Client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{MESS_TYPES}from'../actions/messageAction';import{EditData,DeleteData}from'../actions/globalTypes';var initialState={users:[],resultUsers:0,data:[],firstLoad:false};var messageReducer=function messageReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case MESS_TYPES.ADD_USER:if(state.users.every(function(item){return item._id!==action.payload._id;})){return _objectSpread(_objectSpread({},state),{},{users:[action.payload].concat(_toConsumableArray(state.users))});}return state;case MESS_TYPES.ADD_MESSAGE:return _objectSpread(_objectSpread({},state),{},{data:state.data.map(function(item){return item._id===action.payload.recipient||item._id===action.payload.sender?_objectSpread(_objectSpread({},item),{},{messages:[].concat(_toConsumableArray(item.messages),[action.payload]),result:item.result+1}):item;}),users:state.users.map(function(user){return user._id===action.payload.recipient||user._id===action.payload.sender?_objectSpread(_objectSpread({},user),{},{text:action.payload.text,media:action.payload.media,call:action.payload.call}):user;})});case MESS_TYPES.GET_CONVERSATIONS:return _objectSpread(_objectSpread({},state),{},{users:action.payload.newArr,resultUsers:action.payload.result,firstLoad:true});case MESS_TYPES.GET_MESSAGES:return _objectSpread(_objectSpread({},state),{},{data:[].concat(_toConsumableArray(state.data),[action.payload])});case MESS_TYPES.UPDATE_MESSAGES:return _objectSpread(_objectSpread({},state),{},{data:EditData(state.data,action.payload._id,action.payload)});case MESS_TYPES.DELETE_MESSAGES:return _objectSpread(_objectSpread({},state),{},{data:state.data.map(function(item){return item._id===action.payload._id?_objectSpread(_objectSpread({},item),{},{messages:action.payload.newData}):item;})});case MESS_TYPES.DELETE_CONVERSATION:return _objectSpread(_objectSpread({},state),{},{users:DeleteData(state.users,action.payload),data:DeleteData(state.data,action.payload)});case MESS_TYPES.CHECK_ONLINE_OFFLINE:return _objectSpread(_objectSpread({},state),{},{users:state.users.map(function(user){return action.payload.includes(user._id)?_objectSpread(_objectSpread({},user),{},{online:true}):_objectSpread(_objectSpread({},user),{},{online:false});})});default:return state;}};export default messageReducer;","map":{"version":3,"sources":["H:/Mern Stack Projects/WebApp/server/client/src/redux/reducers/messageReducer.js"],"names":["MESS_TYPES","EditData","DeleteData","initialState","users","resultUsers","data","firstLoad","messageReducer","state","action","type","ADD_USER","every","item","_id","payload","ADD_MESSAGE","map","recipient","sender","messages","result","user","text","media","call","GET_CONVERSATIONS","newArr","GET_MESSAGES","UPDATE_MESSAGES","DELETE_MESSAGES","newData","DELETE_CONVERSATION","CHECK_ONLINE_OFFLINE","includes","online"],"mappings":"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","sourcesContent":["import { MESS_TYPES } from '../actions/messageAction'\nimport { EditData, DeleteData } from '../actions/globalTypes'\n\nconst initialState = {\n    users: [],\n    resultUsers: 0,\n    data: [],\n    firstLoad: false\n}\n\nconst messageReducer = (state = initialState, action) => {\n    switch (action.type){\n        case MESS_TYPES.ADD_USER:\n            if(state.users.every(item => item._id !== action.payload._id)){\n                return {\n                    ...state,\n                    users: [action.payload, ...state.users]\n                };\n            }\n            return state;\n        case MESS_TYPES.ADD_MESSAGE:\n            return {\n                ...state,\n                data: state.data.map(item => \n                    item._id === action.payload.recipient || item._id === action.payload.sender \n                    ? {\n                        ...item,\n                        messages: [...item.messages, action.payload],\n                        result: item.result + 1\n                    }\n                    : item\n                ),\n                users: state.users.map(user => \n                    user._id === action.payload.recipient || user._id === action.payload.sender\n                    ? {\n                        ...user, \n                        text: action.payload.text, \n                        media: action.payload.media,\n                        call: action.payload.call\n                    }\n                    : user\n                )\n            };\n        case MESS_TYPES.GET_CONVERSATIONS:\n            return {\n                ...state,\n                users: action.payload.newArr,\n                resultUsers: action.payload.result,\n                firstLoad: true\n            };\n        case MESS_TYPES.GET_MESSAGES:\n            return {\n                ...state,\n                data: [...state.data, action.payload]\n            };\n        case MESS_TYPES.UPDATE_MESSAGES:\n            return {\n                ...state,\n                data: EditData(state.data, action.payload._id, action.payload)\n            };\n        case MESS_TYPES.DELETE_MESSAGES:\n            return {\n                ...state,\n                data: state.data.map(item => \n                    item._id === action.payload._id\n                    ? {...item, messages: action.payload.newData}\n                    : item\n                )\n            };\n        case MESS_TYPES.DELETE_CONVERSATION:\n            return {\n                ...state,\n                users: DeleteData(state.users, action.payload),\n                data: DeleteData(state.data, action.payload)\n            };\n        case MESS_TYPES.CHECK_ONLINE_OFFLINE:\n            return {\n                ...state,\n                users: state.users.map(user => \n                    action.payload.includes(user._id)\n                    ? {...user, online: true}\n                    : {...user, online: false}\n                )\n            };\n        default:\n            return state;\n    }\n}\n\nexport default messageReducer;"]},"metadata":{},"sourceType":"module"}